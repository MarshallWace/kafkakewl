wait-for-file-at-startup {
  name = ""
  name = ${?WAIT_FOR_FILE_AT_STARTUP}
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  stdout-loglevel = DEBUG
  actor {
    debug {
      unhandled = on
    }
  }
}

# this is to avoid the java.util.concurrent.TimeoutException: Response entity was not subscribed after 1 second. Make sure to read the response entity body or call `discardBytes()` on it
# when calling the metrics service's REST API
akka.http.host-connection-pool.response-entity-subscription-timeout = 10.seconds

akka.http.server {
  verbose-error-messages = on
  parsing {
    max-header-value-length = 32k
  }
}

akka.http {
  parsing {
    # So that http client does not complain about the response being too large
    # (the default is 8mb which isn't always enough, if e.g. there are more than 1500 consumer groups to query for statuses)
    max-to-strict-bytes = infinite
  }
}

kafkakewl-api {
  env = "dev"
  env = ${?KAFKAKEWL_API_ENV}

  http-port: 8080
  http-port: ${?KAFKAKEWL_API_HTTP_PORT}

  http-allowed-origins: ${?KAFKAKEWL_API_HTTP_ALLOWED_ORIGINS}

  auth-plugin-name = "com.mwam.kafkakewl.extensions.builtin.SameUserAuthPlugin"
  auth-plugin-name = ${?KAFKAKEWL_API_HTTP_AUTH_PLUGIN_NAME}

  permission-plugin-name = ${?KAFKAKEWL_API_PERMISSION_PLUGIN_NAME}

  topic-defaults {
    otherConsumerNamespaces: """[]"""
    otherConsumerNamespaces: ${?KAFKAKEWL_API_TOPIC_DEFAULT_OTHER_CONSUMER_NAMESPACES}
    otherProducerNamespaces: """[]"""
    otherProducerNamespaces: ${?KAFKAKEWL_API_TOPIC_DEFAULT_OTHER_PRODUCER_NAMESPACES}
  }

  persistent-store = "kafka"
  persistent-store = ${?KAFKAKEWL_API_PERSISTENT_STORE}

  metrics-service {
    uri = "http://localhost:8090"
    uri = ${?KAFKAKEWL_API_METRICS_URI}
  }

  sql-persistent-store {
    suffix = ${?KAFKAKEWL_API_SQL_HOST_SUFFIX}
    host = ${?KAFKAKEWL_API_SQL_HOST}
    port = ${?KAFKAKEWL_API_SQL_PORT}
    database = ${?KAFKAKEWL_API_SQL_DATABASE}
  }

  changelog-store {
    kafka-cluster {
      brokers = ${?KAFKAKEWL_API_BROKERS}
      security-protocol = ${?KAFKAKEWL_API_SECURITY_PROTOCOL}
      kafka-client-config {
      }
      jaas-config = ${?KAFKAKEWL_API_JAAS_CONFIG}
    }
    system-topic-config {
      replicationFactor: 3
      replicationFactor: ${?KAFKAKEWL_CHANGELOG_STORE_REPLICATION_FACTOR}
      kafka-topic-config {
        "confluent.placement.constraints": ""
        "confluent.placement.constraints": ${?KAFKAKEWL_CHANGELOG_STORE_REPLICA_PLACEMENT}
        "min.insync.replicas": ""
        "min.insync.replicas": ${?KAFKAKEWL_CHANGELOG_STORE_MIN_INSYNC_REPLICAS}
      }
    }
  }

  state-command-processor {
    kafka-cluster {
      brokers = ${?KAFKAKEWL_API_BROKERS}
      security-protocol = ${?KAFKAKEWL_API_SECURITY_PROTOCOL}
      kafka-client-config {
      }
      jaas-config = ${?KAFKAKEWL_API_JAAS_CONFIG}
    }
    fail-fast-if-stateStore-invalid: ${?KAFKAKEWL_PROCESSOR_STATE_ENTITIES_FAILFAST_IF_INVALID}
    kafka-transactional-id = "kewl.dev.processor.state-entities.transactional-id"
    kafka-transactional-id = ${?KAFKAKEWL_PROCESSOR_STATE_ENTITIES_TRANSACTIONAL_ID}
    system-topic-config {
      replicationFactor: 3
      replicationFactor: ${?KAFKAKEWL_PROCESSOR_STATE_ENTITIES_REPLICATION_FACTOR}
      kafka-topic-config: {
        "confluent.placement.constraints": ""
        "confluent.placement.constraints": ${?KAFKAKEWL_PROCESSOR_STATE_ENTITIES_REPLICA_PLACEMENT}
        "min.insync.replicas": ""
        "min.insync.replicas": ${?KAFKAKEWL_PROCESSOR_STATE_ENTITIES_MIN_INSYNC_REPLICAS}
      }
    }
  }

  kafkacluster-command-processor {
    kafka-cluster {
      # the kafka-clusters' brokers and security protocol is defined in the KafkaCluster entity
      jaas-config = ${?KAFKAKEWL_API_JAAS_CONFIG}
    }
    fail-fast-if-deployment-stateStore-invalid: ${?KAFKAKEWL_PROCESSOR_DEPLOYMENT_ENTITIES_FAILFAST_IF_INVALID}
    kafka-transactional-id = "kewl.dev.processor.deployment-entities.transactional-id"
    kafka-transactional-id = ${?KAFKAKEWL_PROCESSOR_DEPLOYMENT_ENTITIES_TRANSACTIONAL_ID}
    system-topic-config {
      replicationFactor: 3
      replicationFactor: ${?KAFKAKEWL_PROCESSOR_DEPLOYMENT_ENTITIES_REPLICATION_FACTOR}
      kafka-topic-config: {
        "confluent.placement.constraints": ""
        "confluent.placement.constraints": ${?KAFKAKEWL_PROCESSOR_DEPLOYMENT_ENTITIES_REPLICA_PLACEMENT}
        "min.insync.replicas": ""
        "min.insync.replicas": ${?KAFKAKEWL_PROCESSOR_DEPLOYMENT_ENTITIES_MIN_INSYNC_REPLICAS}
      }
    }
  }

  super-users = ${?KAFKA_KEWL_SUPER_USERS}
}
